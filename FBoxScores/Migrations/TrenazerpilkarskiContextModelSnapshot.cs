// <auto-generated />
using System;
using FBox.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FBoxScores.Migrations
{
    [DbContext(typeof(TrenazerpilkarskiContext))]
    partial class TrenazerpilkarskiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FBox.Entities.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("club", (string)null);
                });

            modelBuilder.Entity("FBox.Entities.Config", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int")
                        .HasColumnName("exerciseId");

                    b.Property<string>("GeneralConfig")
                        .HasColumnType("mediumtext")
                        .HasColumnName("generalConfig");

                    b.Property<bool>("IsAutosave")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isAutosave");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("ScenarioConfig")
                        .HasColumnType("mediumtext")
                        .HasColumnName("scenarioConfig");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("config", (string)null);
                });

            modelBuilder.Entity("FBox.Entities.Exercisereport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<int?>("ExerciseId")
                        .HasColumnType("int")
                        .HasColumnName("exerciseId");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int")
                        .HasColumnName("playerId");

                    b.Property<byte[]>("ReportBinary")
                        .HasColumnType("blob")
                        .HasColumnName("reportBinary");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PlayerId" }, "fk1_idx");

                    b.ToTable("exercisereport", (string)null);
                });

            modelBuilder.Entity("FBox.Entities.GameConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Exercises")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<float>("StartDelay")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("GameConfigs");
                });

            modelBuilder.Entity("FBox.Entities.GameRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("GameConfigId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("GameConfigId");

                    b.ToTable("GameRecords");
                });

            modelBuilder.Entity("FBox.Entities.GameRecordPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ExerciseScoreList")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("GameRecordId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<float>("TotalScore")
                        .HasColumnType("float");

                    b.Property<float>("TotalScorePercentage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GameRecordId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("FBox.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("Surname")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("player", (string)null);
                });

            modelBuilder.Entity("FBox.Entities.Playerposition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int")
                        .HasColumnName("playerId");

                    b.Property<int>("PositionId")
                        .HasColumnType("int")
                        .HasColumnName("positionId");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PlayerId" }, "player3_idx");

                    b.HasIndex(new[] { "PositionId" }, "position3_idx");

                    b.ToTable("playerposition", (string)null);
                });

            modelBuilder.Entity("FBox.Entities.Playerteam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int")
                        .HasColumnName("playerId");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("teamId");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PlayerId" }, "player_idx");

                    b.HasIndex(new[] { "TeamId" }, "team_idx");

                    b.ToTable("playerteam", (string)null);
                });

            modelBuilder.Entity("FBox.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("position", (string)null);
                });

            modelBuilder.Entity("FBox.Entities.Sensorsconfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("mediumtext")
                        .HasColumnName("value");

                    b.Property<int>("WallNr")
                        .HasColumnType("int")
                        .HasColumnName("wallNr");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("sensorsconfig", (string)null);
                });

            modelBuilder.Entity("FBox.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ClubId")
                        .HasColumnType("int")
                        .HasColumnName("clubId");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ClubId" }, "club_idx");

                    b.ToTable("team", (string)null);
                });

            modelBuilder.Entity("FBox.Entities.Exercisereport", b =>
                {
                    b.HasOne("FBox.Entities.Player", "Player")
                        .WithMany("Exercisereports")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk1");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FBox.Entities.GameRecord", b =>
                {
                    b.HasOne("FBox.Entities.GameConfig", "GameConfig")
                        .WithMany("GameRecords")
                        .HasForeignKey("GameConfigId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("GameConfig");
                });

            modelBuilder.Entity("FBox.Entities.GameRecordPlayer", b =>
                {
                    b.HasOne("FBox.Entities.GameRecord", "GameRecord")
                        .WithMany("Scores")
                        .HasForeignKey("GameRecordId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FBox.Entities.Player", "Player")
                        .WithMany("Scores")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("GameRecord");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FBox.Entities.Playerposition", b =>
                {
                    b.HasOne("FBox.Entities.Player", "Player")
                        .WithMany("Playerpositions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("player3");

                    b.HasOne("FBox.Entities.Position", "Position")
                        .WithMany("Playerpositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("position3");

                    b.Navigation("Player");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("FBox.Entities.Playerteam", b =>
                {
                    b.HasOne("FBox.Entities.Player", "Player")
                        .WithMany("Playerteams")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("player");

                    b.HasOne("FBox.Entities.Team", "Team")
                        .WithMany("Playerteams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("team");

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FBox.Entities.Team", b =>
                {
                    b.HasOne("FBox.Entities.Club", "Club")
                        .WithMany("Teams")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("club");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("FBox.Entities.Club", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("FBox.Entities.GameConfig", b =>
                {
                    b.Navigation("GameRecords");
                });

            modelBuilder.Entity("FBox.Entities.GameRecord", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("FBox.Entities.Player", b =>
                {
                    b.Navigation("Exercisereports");

                    b.Navigation("Playerpositions");

                    b.Navigation("Playerteams");

                    b.Navigation("Scores");
                });

            modelBuilder.Entity("FBox.Entities.Position", b =>
                {
                    b.Navigation("Playerpositions");
                });

            modelBuilder.Entity("FBox.Entities.Team", b =>
                {
                    b.Navigation("Playerteams");
                });
#pragma warning restore 612, 618
        }
    }
}
